# Generated by Django 4.1.3 on 2022-11-20 13:00

import core.util
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("game_num", models.PositiveSmallIntegerField()),
            ],
            options={
                "ordering": ("match_id", "game_num"),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LiveGame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("game_num", models.PositiveSmallIntegerField()),
            ],
            options={
                "ordering": ("match_id", "game_num"),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LiveMatch",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=core.util.get_livematch_id,
                        max_length=32,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("start_time", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
            ],
            options={
                "ordering": ("-start_time",),
            },
        ),
        migrations.CreateModel(
            name="MatchConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("best_of", models.PositiveSmallIntegerField()),
                ("extended_mode", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.TextField(
                        help_text="Slack user ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="User name, as provided by Slack"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.TextField(
                        help_text="Slack team ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_num", models.IntegerField()),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.player",
                    ),
                ),
            ],
            options={
                "ordering": ("player_num",),
                "abstract": False,
                "unique_together": {
                    ("player", "match"),
                    ("player_num", "match"),
                },
            },
        ),
        migrations.CreateModel(
            name="PlayerGame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_num", models.IntegerField()),
                (
                    "move",
                    models.CharField(
                        choices=[
                            ("rock", "rock"),
                            ("paper", "paper"),
                            ("scissors", "scissors"),
                            ("lizard", "lizard"),
                            ("spock", "spock"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.game",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.player",
                    ),
                ),
            ],
            options={
                "ordering": ("player_num",),
                "abstract": False,
                "unique_together": {("player", "game"), ("player_num", "game")},
            },
        ),
        migrations.AddField(
            model_name="match",
            name="config",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="core.matchconfig",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="loser",
            field=models.ForeignKey(
                help_text="An alias to the player that lost",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="match_losses",
                to="core.player",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="players",
            field=models.ManyToManyField(
                help_text="Players in the match, always len=2",
                related_name="matches",
                through="core.PlayerMatch",
                to="core.player",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="rematch",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="parent",
                to="core.match",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="winner",
            field=models.ForeignKey(
                help_text="An alias to the player that won",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="match_wins",
                to="core.player",
            ),
        ),
        migrations.CreateModel(
            name="LivePlayerMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_num", models.IntegerField()),
                ("last_activity", models.DateTimeField(auto_now_add=True)),
                ("is_ready", models.BooleanField(default=False)),
                (
                    "move",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rock", "rock"),
                            ("paper", "paper"),
                            ("scissors", "scissors"),
                            ("lizard", "lizard"),
                            ("spock", "spock"),
                        ],
                        max_length=20,
                    ),
                ),
                ("accepted_rematch", models.BooleanField(default=False)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.livematch",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.player",
                    ),
                ),
            ],
            options={
                "ordering": ("player_num",),
                "abstract": False,
                "unique_together": {
                    ("player", "match"),
                    ("player_num", "match"),
                },
            },
        ),
        migrations.CreateModel(
            name="LivePlayerGame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_num", models.IntegerField()),
                (
                    "move",
                    models.CharField(
                        choices=[
                            ("rock", "rock"),
                            ("paper", "paper"),
                            ("scissors", "scissors"),
                            ("lizard", "lizard"),
                            ("spock", "spock"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.livegame",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.player",
                    ),
                ),
            ],
            options={
                "ordering": ("player_num",),
                "abstract": False,
                "unique_together": {("player", "game"), ("player_num", "game")},
            },
        ),
        migrations.AddField(
            model_name="livematch",
            name="config",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="core.matchconfig",
            ),
        ),
        migrations.AddField(
            model_name="livematch",
            name="permanent_match",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.match",
            ),
        ),
        migrations.AddField(
            model_name="livematch",
            name="players",
            field=models.ManyToManyField(
                related_name="live_matches",
                through="core.LivePlayerMatch",
                to="core.player",
            ),
        ),
        migrations.AddField(
            model_name="livematch",
            name="rematch",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="parent",
                to="core.livematch",
            ),
        ),
        migrations.AddField(
            model_name="livegame",
            name="match",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="games",
                to="core.livematch",
            ),
        ),
        migrations.AddField(
            model_name="livegame",
            name="players",
            field=models.ManyToManyField(
                through="core.LivePlayerGame", to="core.player"
            ),
        ),
        migrations.AddField(
            model_name="livegame",
            name="winner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_wins",
                to="core.player",
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="match",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="games",
                to="core.match",
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="players",
            field=models.ManyToManyField(
                through="core.PlayerGame", to="core.player"
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="winner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_wins",
                to="core.player",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="livegame",
            unique_together={("game_num", "match")},
        ),
        migrations.AlterUniqueTogether(
            name="game",
            unique_together={("game_num", "match")},
        ),
    ]
